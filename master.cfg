# -*- python -*-
# ex: set filetype=python:

__author__ = "Chuck Lever"
__copyright__ = "Copyright (c) 2024 Oracle and/or its affiliates."
__license__ = "Public domain"
__version__ = "1.0"

from buildbot.plugins import (
    schedulers,
    util,
    secrets,
    reporters,
    worker,
    steps,
    changes,
)

from datetime import timedelta

c = BuildmasterConfig = {}

c["buildbotNetUsageData"] = None
c["buildbotURL"] = "http://buildbot.1015granger.net:8010/"
c["builders"] = []
c["configurators"] = [
    util.JanitorConfigurator(logHorizon=timedelta(weeks=4), hour=1, dayOfWeek=6)
]
c["db"] = {
    "db_url": "sqlite:///state.sqlite",
}
c["projects"] = []
c["protocols"] = {"pb": {"port": 9989}}
c["secretsProviders"] = [
    secrets.SecretInAFile(dirname="/usr/local/home/buildmaster/.secrets/")
]
c["services"] = []
c["title"] = "Chuck's BuildBot"
c["titleURL"] = "https://git.kernel.org/pub/scm/linux/kernel/"
c["workers"] = []
c["www"] = {
    "port": 8010,
    "plugins": {
        "badges": {
            "left_pad": 0,
            "right_pad": 0,
            "border_radius": 3,
            "style": "badgeio",
        },
        "console_view": True,
        "grid_view": False,
        "waterfall_view": True,
        "wsgi_dashboards": [],
    },
}

####### WORKERS

c["workers"] = [
    worker.Worker("kdevops-small", util.Secret("worker-kdevops-small"), max_builds=1),
    worker.Worker("kdevops-large", util.Secret("worker-kdevops-large"), max_builds=1),
]

######## BUILDERS


def kdevopsFactory(testBranch, workflow):
    all_steps = [
        steps.Git(
            name="download kdevops",
            description="downloading",
            descriptionDone="download",
            repourl="https://github.com/chucklever/kdevops.git",
            branch=testBranch,
            mode="full",
            method="clobber",
            alwaysUseLatest=True,
            progress=False,
            shallow=True,
        ),
        steps.ShellCommand(
            name="configure kdevops",
            description="configuring",
            descriptionDone="configure",
            command=["make", f"defconfig-{testBranch}-{workflow}"],
            workdir="build/",
            haltOnFailure=True,
        ),
        steps.ShellCommand(
            name="prepare ansible",
            description="preparing",
            descriptionDone="prepare",
            command=["make"],
            workdir="build/",
            haltOnFailure=True,
        ),
        steps.ShellCommand(
            name="bring up test nodes",
            description="launching",
            descriptionDone="bring-up",
            command=["make", "bringup"],
            workdir="build/",
            haltOnFailure=True,
        ),
        steps.ShellCommand(
            name="build linux",
            description="building",
            descriptionDone="build",
            command=["make", "linux"],
            workdir="build/",
            timeout=None,
            haltOnFailure=True,
        ),
        steps.ShellCommand(
            name="build tests",
            description="building",
            descriptionDone="build",
            command=["make", workflow],
            workdir="build/",
            timeout=None,
            haltOnFailure=True,
        ),
        steps.ShellCommand(
            name="run tests",
            description="testing",
            descriptionDone="test",
            command=["make", f"{workflow}-baseline"],
            workdir="build/",
            timeout=8 * 3600,
            haltOnFailure=True,
        ),
        steps.ShellCommand(
            name="clean up",
            description="quiescing",
            descriptionDone="quiescing",
            command=["make", "destroy"],
            workdir="build/",
            alwaysRun=True,
        ),
    ]
    factory = util.BuildFactory(all_steps)
    factory.useProgress = False
    return factory


def kdevopsBuilder(branch, workflow, workerList):
    return util.BuilderConfig(
        name=f"{branch}-{workflow}",
        workernames=workerList,
        tags=["nfsd", "kdevops", f"{branch}", f"{workflow}"],
        factory=kdevopsFactory(branch, workflow),
    )


kdevopsSchedulerNames = [
    "nfsd-next",
    "nfsd-fixes",
    "nfsd-testing",
]

kdevopsLtsSchedulerNames = [
    "nfsd-6.1.y",
    "nfsd-5.15.y",
    "nfsd-5.10.y",
]

# Builders that build the test kernel on the control node
for schedName in kdevopsSchedulerNames:
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "fstests",
            [
                "kdevops-large",
            ],
        )
    )
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "gitr",
            [
                "kdevops-large",
                "kdevops-small",
            ],
        )
    )
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "ltp",
            [
                "kdevops-large",
                "kdevops-small",
            ],
        )
    )
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "nfstest",
            [
                "kdevops-large",
                "kdevops-small",
            ],
        )
    )
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "pynfs",
            [
                "kdevops-small",
                "kdevops-large",
            ],
        )
    )

# Builders that build the test kernel on the target nodes
for schedName in kdevopsLtsSchedulerNames:
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "fstests",
            [
                "kdevops-large",
            ],
        )
    )
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "gitr",
            [
                "kdevops-large",
            ],
        )
    )
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "ltp",
            [
                "kdevops-large",
            ],
        )
    )
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "nfstest",
            [
                "kdevops-large",
            ],
        )
    )
    c["builders"].append(
        kdevopsBuilder(
            schedName,
            "pynfs",
            [
                "kdevops-small",
            ],
        )
    )

####### CHANGESOURCES

c['change_source'] = [
    changes.GitPoller(
        'https://git.kernel.org/pub/scm/linux/kernel/git/cel/linux.git',
        branches=['nfsd-next', 'nfsd-fixes', 'nfsd-testing', 'nfsd-6.1.y', 'nfsd-5.15.y', 'nfsd-5.10.y']
    ),
    changes.GitPoller(
        'https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git',
        branches=['queue/5.10', 'queue/5.15', 'queue/6.1', 'queue/6.6']
    ),
    changes.GitPoller(
        'https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git',
        branches=['master']
    ),
]

####### SCHEDULERS

kdevopsWorkflowNames = ["fstests", "gitr", "ltp", "nfstest", "pynfs"]


def kdevopsBranchScheduler(schedName, watchedRepo, watchedBranch):
    c["schedulers"].append(
        schedulers.SingleBranchScheduler(
            name=f"branch-{schedName}",
            change_filter=util.ChangeFilter(
                repository=watchedRepo, branch=watchedBranch
            ),
            treeStableTimer=300,
            builderNames=[
                f"{schedName}-{workflow}" for workflow in kdevopsWorkflowNames
            ],
        )
    )


def kdevopsNightlyScheduler(schedName, watchedRepo, watchedBranch, hour, minute):
    c["schedulers"].append(
        schedulers.Nightly(
            name=f"nightly-{schedName}",
            change_filter=util.ChangeFilter(
                repository=watchedRepo, branch=watchedBranch
            ),
            hour=hour,
            minute=minute,
            builderNames=[
                f"{schedName}-{workflow}" for workflow in kdevopsWorkflowNames
            ],
        )
    )


def kdevopsForceSchedulers(schedName):
    for workflow in kdevopsWorkflowNames:
        c["schedulers"].append(
            schedulers.ForceScheduler(
                name=f"force-{schedName}-{workflow}",
                builderNames=[f"{schedName}-{workflow}"],
                buttonName=f"Start {schedName}-{workflow}",
            )
        )


c['schedulers'] = [
    schedulers.SingleBranchScheduler(
        name='scheduler-nfsd-next',
        change_filter=util.ChangeFilter(
            repository='https://git.kernel.org/pub/scm/linux/kernel/git/cel/linux.git',
                branch='nfsd-next'),
        treeStableTimer=300,
        builderNames=[
            'nfsd-next-fstests',
            'nfsd-next-gitr',
            'nfsd-next-ltp',
            'nfsd-next-nfstest',
            'nfsd-next-pynfs']),
    schedulers.ForceScheduler(
        name='force-nfsd-next',
        builderNames=[
            'nfsd-next-fstests',
            'nfsd-next-gitr',
            'nfsd-next-ltp',
            'nfsd-next-nfstest',
            'nfsd-next-pynfs']),

    schedulers.SingleBranchScheduler(
        name='scheduler-nfsd-fixes',
        change_filter=util.ChangeFilter(
            repository='https://git.kernel.org/pub/scm/linux/kernel/git/cel/linux.git',
                branch='nfsd-fixes'),
        treeStableTimer=300,
        builderNames=[
            'nfsd-fixes-fstests',
            'nfsd-fixes-gitr',
            'nfsd-fixes-ltp',
            'nfsd-fixes-nfstest',
            'nfsd-fixes-pynfs']),
    schedulers.ForceScheduler(
        name='force-nfsd-fixes',
        builderNames=[
            'nfsd-fixes-fstests',
            'nfsd-fixes-gitr',
            'nfsd-fixes-ltp',
            'nfsd-fixes-nfstest',
            'nfsd-fixes-pynfs']),

    schedulers.ForceScheduler(
        name='force-nfsd-testing',
        builderNames=[
            'nfsd-testing-fstests',
            'nfsd-testing-gitr',
            'nfsd-testing-ltp',
            'nfsd-testing-nfstest',
            'nfsd-testing-pynfs']),
    schedulers.ForceScheduler(
        name='force-nfsd-6-1-y',
        builderNames=[
            'nfsd-6.1.y-fstests',
            'nfsd-6.1.y-gitr',
            'nfsd-6.1.y-ltp',
            'nfsd-6.1.y-nfstest',
            'nfsd-6.1.y-pynfs']),
    schedulers.ForceScheduler(
        name='force-nfsd-5-15-y',
        builderNames=[
            'nfsd-5.15.y-fstests',
            'nfsd-5.15.y-gitr',
            'nfsd-5.15.y-ltp',
            'nfsd-5.15.y-nfstest',
            'nfsd-5.15.y-pynfs']),
    schedulers.ForceScheduler(
        name='force-nfsd-5-10-y',
        builderNames=[
            'nfsd-5.10.y-fstests',
            'nfsd-5.10.y-gitr',
            'nfsd-5.10.y-ltp',
            'nfsd-5.10.y-nfstest',
            'nfsd-5.10.y-pynfs']),
]

exec(open("services.py").read())
